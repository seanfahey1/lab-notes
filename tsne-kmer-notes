culturing pattern:
enrichment1 -> enrichment2 -> [RC1, RC2, RC3, ...] -> sometimes [RC1, RC2, RC3, ...]

enrichments are community of bacteria
RC are specific bacteria strains


reason for k-mer stuff:
	see how many enrichments are actually needed to get out phages. Also if we're loosing anything by not choosing the right RC bacteria.




processing reads into easier to work with files using seqtk:
	Seqtk is now set up on microway
	
	seqtk seq -a in.fastq > out.fasta 
		# converts sequence fastq to fasta, discards quality scores

	current file structure
		.
		├── WGA27-31
		│     ├── reads
		│     │     ├── WGA27_reads
		│     │     │     ├── ...
		│     │     │     ├── WGA27_S480_R1_001.fastq
		│     │     │     └── WGA27_S480_R2_001.fastq
		│     │     ├── ...
		└── WGA9-18
			  ├── reads
			  │     ├── WGA10_reads_18940E2
			  │     │     ├── ...
			  │     │     ├── WGA10_S463_R1_001.fastq
			  │     │     └── WGA10_S463_R2_001.fastq
			  │     ├── ...

	command used to convert all fastq to fasta:
	for f in in */reads/*/*_S*_R*fastq	# just looking for a pattern that masks just the read files
	do
		o=${f%.*}".fasta"	$f but dropping the substring ".*"" (first occurance) and adding ".fasta"
		seqtk seq -a "./"$f > "./"$o
	done

	got this error on one of the files:
		[E::stk_seq] failed to open the input file/stream.
		Usually this means I gave it a filename that doesn't exist

	checked with this command:
		for f in */reads/*/*_S*_R*.fasta
		do 
			wc -l "./$f"
		done

	results look reasonable. Not sure what the error means but no problems running
		8327844 ./WGA27-31/reads/WGA27_reads/WGA27_S480_R1_001.fasta
		8327844 ./WGA27-31/reads/WGA27_reads/WGA27_S480_R2_001.fasta
		1655908 ./WGA27-31/reads/WGA28_reads/WGA28_S481_R1_001.fasta
		1655908 ./WGA27-31/reads/WGA28_reads/WGA28_S481_R2_001.fasta
		1621934 ./WGA27-31/reads/WGA29_reads/WGA29_S482_R1_001.fasta
		1621934 ./WGA27-31/reads/WGA29_reads/WGA29_S482_R2_001.fasta
		4243508 ./WGA27-31/reads/WGA30_reads/WGA30_S483_R1_001.fasta
		4243508 ./WGA27-31/reads/WGA30_reads/WGA30_S483_R2_001.fasta
		1770134 ./WGA27-31/reads/WGA31_reads/WGA31_S484_R1_001.fasta
		1770134 ./WGA27-31/reads/WGA31_reads/WGA31_S484_R2_001.fasta
		8986742 ./WGA9-18/reads/WGA10_reads_18940E2/WGA10_S463_R1_001.fasta
		8986742 ./WGA9-18/reads/WGA10_reads_18940E2/WGA10_S463_R2_001.fasta
		2052766 ./WGA9-18/reads/WGA11_reads_RC49E1/WGA11_S464_R1_001.fasta
		2052766 ./WGA9-18/reads/WGA11_reads_RC49E1/WGA11_S464_R2_001.fasta
		8167974 ./WGA9-18/reads/WGA12_reads_RC49E2/WGA12_S465_R1_001.fasta
		8167974 ./WGA9-18/reads/WGA12_reads_RC49E2/WGA12_S465_R2_001.fasta
		9032718 ./WGA9-18/reads/WGA13_reads/WGA13_S466_R1_001.fasta
		9032718 ./WGA9-18/reads/WGA13_reads/WGA13_S466_R2_001.fasta
		1678816 ./WGA9-18/reads/WGA14_reads/WGA14_S467_R1_001.fasta
		1678816 ./WGA9-18/reads/WGA14_reads/WGA14_S467_R2_001.fasta
		1746486 ./WGA9-18/reads/WGA15_reads/WGA15_S468_R1_001.fasta
		1746486 ./WGA9-18/reads/WGA15_reads/WGA15_S468_R2_001.fasta
		9915892 ./WGA9-18/reads/WGA16_reads/WGA16_S469_R1_001.fasta
		9915892 ./WGA9-18/reads/WGA16_reads/WGA16_S469_R2_001.fasta
		8243072 ./WGA9-18/reads/WGA17_reads/WGA17_S470_R1_001.fasta
		8243072 ./WGA9-18/reads/WGA17_reads/WGA17_S470_R2_001.fasta
		2124042 ./WGA9-18/reads/WGA18_reads/WGA18_S471_R1_001.fasta
		2124042 ./WGA9-18/reads/WGA18_reads/WGA18_S471_R2_001.fasta
		9127942 ./WGA9-18/reads/WGA9_reads_18940E1__/WGA9_S462_R1_001.fasta
		9127942 ./WGA9-18/reads/WGA9_reads_18940E1__/WGA9_S462_R2_001.fasta


Edited kmer counting script to take 2 methods: file and contig
   
    method="file" means arrange the dataframe with each filename as the index,
    method="contig" means arrange the dataframe with each contig header as the index

    "file" is best used for reads in fasta format, where which read a kmer came from isn't useful info really.
    "contig" is best for the assembled WGA fasta files, where we care about each contig as it's own data source.


Created contig tsne for each path E1 - E2 - RC1 - RC2
Looked into PCA plots, but I'll need some answers on how to do this. The PCA tutorials I found are all about using PCAs to actually predict stuff. Not sure if I need to do this.

Something to look in to:
- sort the heatplot by best clustering (use R base plotting heatmap. This is done automatically)
	might need to play with height and width
	not ggplot! the base one is better for this. ggplot won't sort or show heiarchical side plot.


Moving on from frap. It won't give me the outputs I want. Anvio will work better.

** 9-10-13-14 is the most interesting path for now


faster way to get kmers/new method:

	grep -v ">" WGA10patricassembled_contigs.fasta | awk -v num=4 '{for(i=1;i<=length($0);i+=4) print substr($0,i,num)}'

	New method for reads:
		- shell script to produce .kmer files
		- kmer counter python script to generate normalized dataframes
		- tsne plot script to produce plots


Current workflow:

for fastq paired-end read files:
	
	0) Note: read files already grouped by WGA.
	1) get-kmers-from-fasta-reads.sh bash script to run seqtk and get reads with grep + awk 
	2) counting-kmers.py to get kmer count dataframe for each WGA. Pay attention to args!! Especially method.
	3) tsne.py to produce tsne plots
		Need to manually select/mask for the WGAs I want in the script before producing each plot (Not automated)
		Is this right??? Do I want 1 datapoint per read? I have 1 per WGA. Might need to change this workflow.

for fasta contig files:
	
	0) Note: contig files are for one WGA each
	1) counting-kmers.py to get kmer count dataframe for each contig. Pay attention to args.
	2) blastn on microway
	3) grep -A 1000 "Query= WGA" WGA9-18_blast_results.out > reduced_blast_results_9-18.out # to reduce filesize significantly before transfering. No need for the alignment stuff.
	4) processing-blast-results.py
	4) tsne.py to produce tsne plots
		Need to manually select/mask for the WGAs I want in the script before producing each plot (Not automated)
		Also manually add the assignment labels for plotting.


Blast to get phage assignments for tsne plots:

nohup blastn -db nt -query WGA27-31_combined.fasta -out blast-results/WGA27-31_blast_results.out
grep -A 1000 "Query= " WGA27-31_blast_results.out > reduced_WGA27-31_blast_results.out
processing-blast-resuts.py to get counts into a dataframe
Then call tsne.py. For now, blast results csv needs to be edited into the main function.



Re-ran WGA11 assembly on BV-BRC using 6 methods:
	- auto/default settings
	- 1 round racon, 1 round pilon
	- comprehensive genome analysis with auto/default settings
	- no trim, other settings as default
	- unicycler
	- spades
	Spades assembler gave far more contigs (7119 contigs). All other outputs were identical with 929 contigs.



To Do:

<Patrick / BVBRC>
- repeat assemblies for high contig assembled data (11-18)
	- also check quality of calls, esp. for smaller contigs. Might be worth noting if files with many contigs also have lower quality calls.

	- maybe try assembling with different settings/assemblers to see if we get wildly different number of contigs

- check BV-BRC outputs to see if different methods have similar results

<organization stuff>
- mv all WGA9 to WGA09 so they sort better

<tsne>
- Need to get tsne plot working for reads. One for each path. 
	Just set the df masking in the code directly because freqs. are normalized/scaled to each file anyway.
	Make sure colors look good, axis/title labels, etc.

- need to get blast results for each contig
	classify as phage, prophage, or bacteria
	add this to the dataframe as a column
	use this column as label for the tsne plot
		** modify tsne code to check for a "label" column and remove before doing tsne, then use as shape for plotly
	For now: just label as any phage hits, any terminase/terl/integrase hits, or no hits

- add plot point labels for contig #, length, phage hit %, etc.

- make the heatplot for reads as well. Might be easier to see things.

<cd-hit>
- cd hit to cluster each WGA
	take representative contigs from the clustered data (cd hit gives this)
	then re-do the clustering across all paths, then against all WGAs (combining the clustered outputs)












