culturing pattern:
enrichment1 -> enrichment2 -> [RC1, RC2, RC3, ...] -> sometimes [RC1, RC2, RC3, ...]

enrichments are community of bacteria
RC are specific bacteria strains


reason for k-mer stuff:
	see how many enrichments are actually needed to get out phages. Also if we're loosing anything by not choosing the right RC bacteria.




processing reads into easier to work with files using seqtk:
	Seqtk is now set up on microway
	
	seqtk seq -a in.fastq > out.fasta 
		# converts sequence fastq to fasta, discards quality scores

	current file structure
		.
		├── WGA27-31
		│     ├── reads
		│     │     ├── WGA27_reads
		│     │     │     ├── ...
		│     │     │     ├── WGA27_S480_R1_001.fastq
		│     │     │     └── WGA27_S480_R2_001.fastq
		│     │     ├── WGA28_reads
		│     │     │     ├── ...
		│     │     │     ├── WGA28_S481_R1_001.fastq
		│     │     │     └── WGA28_S481_R2_001.fastq
		│     │     ├── ...
		└── WGA9-18
			  ├── reads
			  │     ├── WGA10_reads_18940E2
			  │     │     ├── ...
			  │     │     ├── WGA10_S463_R1_001.fastq
			  │     │     └── WGA10_S463_R2_001.fastq
			  │     ├── ...

	command used to convert all fastq to fasta:
	for f in in */reads/*/*_S*_R*fastq	# just looking for a pattern that masks just the read files
	do
		o=${f%.*}".fasta"
		seqtk seq -a "./"$f > "./"$o
	done

	got this error on one of the files:
		[E::stk_seq] failed to open the input file/stream.
		Usually this means I gave it a filename that doesn't exist

	checked with this command:
		for f in */reads/*/*_S*_R*.fasta; do wc -l "./$f"; done

	results look reasonable. Not sure what the error means but no problems running
		8327844 ./WGA27-31/reads/WGA27_reads/WGA27_S480_R1_001.fasta
		8327844 ./WGA27-31/reads/WGA27_reads/WGA27_S480_R2_001.fasta
		1655908 ./WGA27-31/reads/WGA28_reads/WGA28_S481_R1_001.fasta
		1655908 ./WGA27-31/reads/WGA28_reads/WGA28_S481_R2_001.fasta
		1621934 ./WGA27-31/reads/WGA29_reads/WGA29_S482_R1_001.fasta
		1621934 ./WGA27-31/reads/WGA29_reads/WGA29_S482_R2_001.fasta
		4243508 ./WGA27-31/reads/WGA30_reads/WGA30_S483_R1_001.fasta
		4243508 ./WGA27-31/reads/WGA30_reads/WGA30_S483_R2_001.fasta
		1770134 ./WGA27-31/reads/WGA31_reads/WGA31_S484_R1_001.fasta
		1770134 ./WGA27-31/reads/WGA31_reads/WGA31_S484_R2_001.fasta
		8986742 ./WGA9-18/reads/WGA10_reads_18940E2/WGA10_S463_R1_001.fasta
		8986742 ./WGA9-18/reads/WGA10_reads_18940E2/WGA10_S463_R2_001.fasta
		2052766 ./WGA9-18/reads/WGA11_reads_RC49E1/WGA11_S464_R1_001.fasta
		2052766 ./WGA9-18/reads/WGA11_reads_RC49E1/WGA11_S464_R2_001.fasta
		8167974 ./WGA9-18/reads/WGA12_reads_RC49E2/WGA12_S465_R1_001.fasta
		8167974 ./WGA9-18/reads/WGA12_reads_RC49E2/WGA12_S465_R2_001.fasta
		9032718 ./WGA9-18/reads/WGA13_reads/WGA13_S466_R1_001.fasta
		9032718 ./WGA9-18/reads/WGA13_reads/WGA13_S466_R2_001.fasta
		1678816 ./WGA9-18/reads/WGA14_reads/WGA14_S467_R1_001.fasta
		1678816 ./WGA9-18/reads/WGA14_reads/WGA14_S467_R2_001.fasta
		1746486 ./WGA9-18/reads/WGA15_reads/WGA15_S468_R1_001.fasta
		1746486 ./WGA9-18/reads/WGA15_reads/WGA15_S468_R2_001.fasta
		9915892 ./WGA9-18/reads/WGA16_reads/WGA16_S469_R1_001.fasta
		9915892 ./WGA9-18/reads/WGA16_reads/WGA16_S469_R2_001.fasta
		8243072 ./WGA9-18/reads/WGA17_reads/WGA17_S470_R1_001.fasta
		8243072 ./WGA9-18/reads/WGA17_reads/WGA17_S470_R2_001.fasta
		2124042 ./WGA9-18/reads/WGA18_reads/WGA18_S471_R1_001.fasta
		2124042 ./WGA9-18/reads/WGA18_reads/WGA18_S471_R2_001.fasta
		9127942 ./WGA9-18/reads/WGA9_reads_18940E1__/WGA9_S462_R1_001.fasta
		9127942 ./WGA9-18/reads/WGA9_reads_18940E1__/WGA9_S462_R2_001.fasta




to-do:
- start with kmer size of 4 (256 possible nucleotide 4mers)
- get all kmers for each sequence. Calculate relative frequency for each contig/read.

- do this for contigs, then do this for read files.

- frap (ana cobian) can help with this, but Greg says that the plots don't work anymore 
(or only worked on ana's system?)



to do:
figure out how to count kmers for reads files
	grab the 2nd line, then every 4th
	drop anything that has an N
		if this doesn't work, drop anything that isn't ATCG

	cat | awk (grab every nth line) | grep (to get the kmer)

	or use seqtk to convert fastq to fasta!! then grep to ignore lines that start with >




modify code to work with fastq reads




